/** * Context tag handler ptototype. */ import com.imcode.imcms.servlet.tags.TextTagimport imcode.server.Imcmsimport imcode.server.parser.ParserParametersimport com.imcode.imcms.api.Contentimport com.imcode.imcms.api.ContentLoopimport com.imcode.imcms.dao.ContentLoopDaodef request = contentTag.pageContext.requestdef response = contentTag.pageContext.responsedef parserParameters = ParserParameters.fromRequest(request)def documentRequest = parserParameters.documentRequestdef document = documentRequest.documentdef dao = (ContentLoopDao)Imcms.getServices().getSpringBean("contentLoopDao")def metaId = document.meta.idsynchronized (this) {    loop = dao.getContentLoop(metaId, contentTag.no);        if (loop == null) {    	loop = dao.createContentLoop(metaId, contentTag.no, contentTag.baseIndex)    }}if (parserParameters.groupMode) {	def cmd = request.getParameter("cmd")	def contentId = request.getParameter("contentId")		if (contentId) contentId = new Long(contentId)		switch (cmd) {	    case "addFirst":	        Content content = dao.addFisrtContent(loop.id)	        break	    	    case "addLast":	        Content content = dao.addLastContent(loop.id)	        break	        	    case "remove":	    	dao.deleteContent(contentId)	        break	        	    case "moveUp":	    	dao.moveContentUp(loop, contentId)	        break	        	    case "moveDown":	    	dao.moveContentDown(loop, contentId)	        break    	                case "addBefore":            dao.insertNewContentBefore(loop, contentId)            break                    case "addAfter":            dao.insertNewContentAfter(loop, contentId)            break            	}}// update bindingsloop = dao.getContentLoop(metaId, contentTag.no);