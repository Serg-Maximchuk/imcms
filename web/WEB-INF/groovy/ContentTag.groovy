import com.imcode.imcms.servlet.tags.TextTagimport imcode.server.Imcmsimport imcode.server.parser.ParserParametersimport com.imcode.imcms.api.Contentimport com.imcode.imcms.api.ContentLoopimport com.imcode.imcms.dao.ContentLoopDao// Content items base 'no' callculation:// int no = loop.getBaseIndex() + (content.getSequenceIndex() * ContentLoop.STEP);	def getOrdredLoopIndexes(loop) {	def indexes = []		loop.contents.each {		indexes << it.sequenceIndex	}	    return indexes}def request = contentTag.pageContext.requestdef response = contentTag.pageContext.responsedef parserParameters = ParserParameters.fromRequest(request)def documentRequest = parserParameters.documentRequestdef document = documentRequest.documentdef dao = (ContentLoopDao)Imcms.getServices().getSpringBean("contentLoopDao")ContentLoop loop;synchronized (this) {    loop = dao.getContentLoop(document.id, contentTag.no);        if (loop == null) {    	loop = dao.createContentLoop(document.id, contentTag.no, contentTag.baseIndex)    }}if (parserParameters.groupMode) {	def cmd = request.getParameter("cmd")	def contentId = request.getParameter("contentId")		switch (cmd) {	    case "addFirst":	        Content content = dao.addFisrtContent(loop)	        break	    	    case "addLast":	        Content content = dao.addLastContent(loop)	        break	        	    case "remove":	    	//dao.removeContent(loop, contentId)	        break	        	    case "moveUp":	    	//dao.moveContentUp(loop, contentId)	        break	        	    case "moveDown":	    	//dao.moveContentDown(loop, contentId)	        break         	        	}}//bindingsordredLoopIndexes = getOrdredLoopIndexes(loop)