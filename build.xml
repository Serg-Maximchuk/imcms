<?xml version='1.0' encoding='iso-8859-1'?>

<!-- The Ant 'build.xml'-file for imCMS -->

<project name="imCMS" default="dist" xmlns:artifact="urn:maven-artifact-ant">
	
    <!-- Read in 'build.properties' and set the properties therein. -->
    <!-- Those properties are used as bases for latsproer properties in this file. -->
    <available file="build.properties" property="build.properties-available" />
    <available file="build.properties" property="build.properties" value="build.properties"/>
    <property name="build.properties" value="build.properties.template" />
    <property file="${build.properties}"/>
	
    <!-- The current version of imCMS. -->
    <property name="svnurl" value="$URL$"/>

    <!-- versionnumber : imCMS version without suffix, only the number (e.g. "1.2.3") -->
    <property name="version" value=""/>
    <property name="versionnumber" value=""/>
    <property name="versionfilesuffix" value=""/>
	
	<property name="maven.repo.url" value="scp://garm.imcode.com:/srv/www/apache/sites/repo.imcode.com/maven2"/>
	<property name="maven.repo.id" value="imcode"/>

    <!-- ant build directories. --> 
    <property name="build.dir" value="${basedir}/build"/>    
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="temp.dir" value="${basedir}/temp"/>
	<property name="lib.dir" value="${basedir}/lib"/>

	<!-- -->
	<!-- maven directories -->
	<!-- -->
	
	<property name="main.java.dir" value="${basedir}/src/main/java"/>
	<property name="main.resources.dir" value="${basedir}/src/main/resources"/>
	
	<property name="main.webapp.dir" value="${basedir}/src/main/webapp"/>	
	<property name="main.webapp.login.dir" value="${main.webapp.dir}/login"/>
    <property name="main.webapp.imcms.dir" value="${main.webapp.dir}/imcms"/>	
    
	<property name="main.webapp.web-inf.dir" value="${main.webapp.dir}/WEB-INF"/>
	
    <property name="versionfile" value="${main.webapp.web-inf.dir}/version.txt"/>
    <property name="checksumsfile" value="${main.webapp.web-inf.dir}/checksums.txt"/>

    <property name="srcincludes" value="MANIFEST.TXT"/>
	
    <property name="classes" value="${temp.dir}/classes"/>	
    <property name="conf" value="${main.webapp.web-inf.dir}/conf"/>
	<property name="webinf.classes" value="${main.webapp.web-inf.dir}/classes"/>
    <property name="lib" value="${main.webapp.web-inf.dir}/lib"/>
    <property name="templates" value="${main.webapp.web-inf.dir}/templates"/>
    <property name="sql" value="${main.webapp.web-inf.dir}/sql"/>
    <property name="sql-diff" value="${sql}/diff"/>
    <property name="sql-sprocs" value="${sql}/sprocs"/>
    
    <!-- Maven integration -->
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" 
          uri="urn:maven-artifact-ant"
          classpath="${lib.dir}/maven-ant-tasks-2.0.9.jar"/>
	
	<artifact:pom id="pom" file="pom.xml"/>	
	<artifact:dependencies pathid="pom.classpath" pomrefid="pom"/>
	
	<property name="maven.build.dir" value="${pom.build.directory}"/>
	<property name="maven.build.webapp.dir" value="${maven.build.dir}/${pom.artifactId}"/>
	<property name="maven.build.war" value="${maven.build.dir}/${pom.artifactId}.war"/>
	<property name="maven.build.jar" value="${maven.build.webapp.dir}/WEB-INF/lib/${pom.artifactId}.jar"/>
    <!-- End of maven integration -->		
    
    <taskdef name="imtranslate" classname="com.imcode.ant.tasks.Translate" classpathref="pom.classpath"/>
    <taskdef name="checksumfiles" classname="com.imcode.ant.tasks.ChecksumFiles" classpathref="pom.classpath"/>
    <taskdef name="setsystemproperty" classname="com.imcode.ant.tasks.SetSystemPropertyTask" classpathref="pom.classpath"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="pom.classpath"/>
	
    <setsystemproperty name="org.apache.commons.logging.Log" value="org.apache.commons.logging.impl.NoOpLog"/>

	<!--
    <taskdef classname="org.apache.jasper.JspC" name="jasper2" classpathref="pom.classpath"/>
    -->
    <taskdef resource="checkstyletask.properties" classpathref="pom.classpath"/>

    <!-- Distribution targets -->

    <target name="dist" depends="bindist,srcdist" description="Build all binary and source distributions."/>

    <target name="bindist" depends="bindist-jar,bindist-api-jar,bindist-zip,bindist-tgz" description="Build all binary distributions."/>

    <target name="bindist-zip" depends="bindist-war">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${temp.dir}/docs"/>
        <fixcrlf srcdir="${basedir}/docs" destdir="${temp.dir}/docs" eol="dos"/>
        <zip destfile="${bindist-zip}">
            <fileset file="${war}"/>
            <fileset dir="${dist.dir}" includes="imcms*.sql"/>
            <fileset dir="${temp.dir}/docs" includes="*.TXT,*.HTML,*.css"/>
        </zip>
    </target>

    <target name="bindist-tgz" depends="bindist-war">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${temp.dir}/docs"/>
        <fixcrlf srcdir="${basedir}/docs" destdir="${temp.dir}/docs" eol="unix"/>
        <tar destfile="${bindist-tgz}" compression="gzip">
            <tarfileset file="${war}"/>
            <tarfileset dir="${dist.dir}" includes="imcms*.sql"/>
            <tarfileset dir="${temp.dir}/docs" includes="*.TXT,*.HTML,*.css"/>
        </tar>
    </target>

    <target name="bindist-war" depends="build,apidocs,checksumsfile">
        <mkdir dir="${dist.dir}"/>
        <war warfile="${war}" basedir="${build.dir}" webxml="${main.webapp.web-inf.dir}/web.xml"/>
    </target>

    <target name="bindist-jar" depends="build">
        <mkdir dir="${dist.dir}"/>
        <copy file="${jar}" tofile="${bindist-jar}"/>
    </target>
        
    <target name="bindist-api-jar" depends="mvn-compile">
        <mkdir dir="${dist.dir}"/>
        <jar destfile="${bindist-api-jar}" basedir="${classes}" includes="com/imcode/imcms/api/**"/>
    </target>

    <target name="srcdist" depends="srcdist-zip,srcdist-tgz" description="Build all source distributions."/>

    <target name="srcdist-zip" depends="init">
        <mkdir dir="${dist.dir}"/>
        <!-- <zip> will for some reason throw an IllegalArgumentException if the file exists.-->
        <delete file="${srcdist-zip}"/>
        <zip destfile="${srcdist-zip}">
            <zipfileset includesfile="${srcincludes}" dir="${basedir}" prefix="imcms${versionfilesuffix}"/>
        </zip>
    </target>

    <target name="srcdist-tgz" depends="init">
        <mkdir dir="${dist.dir}"/>
        <dependset>
            <srcfileset file="${srcincludes}"/>
            <targetfileset file="${srcdist-tgz}"/>
        </dependset>
        <tar destfile="${srcdist-tgz}" compression="gzip">
            <tarfileset includesfile="${srcincludes}" dir="${basedir}" prefix="imcms${versionfilesuffix}"/>
        </tar>
    </target>

    <target name="distcheck" depends="distcheck-zip,distcheck-tgz" description="Test all source distributions."/>

    <target name="distcheck-zip" depends="srcdist-zip">
        <property name="srcdist-zip-check" value="${temp.dir}/srcdist-zip-check"/>
        <unzip src="${srcdist-zip}" dest="${srcdist-zip-check}"/>
        <copy file="${srcdist-zip-check}/imcms${versionfilesuffix}/build.properties.template" tofile="${srcdist-zip-check}/imcms${versionfilesuffix}/build.properties"/>
        <ant dir="${srcdist-zip-check}/imcms${versionfilesuffix}" target="dist"/>
    </target>

    <target name="distcheck-tgz" depends="srcdist-tgz">
        <property name="srcdist-tgz-check" value="${temp.dir}/srcdist-tgz-check"/>
        <untar src="${srcdist-tgz}" dest="${srcdist-tgz-check}" compression="gzip"/>
        <copy file="${srcdist-tgz-check}/imcms${versionfilesuffix}/build.properties.template" tofile="${srcdist-tgz-check}/imcms${versionfilesuffix}/build.properties"/>
        <ant dir="${srcdist-tgz-check}/imcms${versionfilesuffix}" target="dist"/>
    </target>

    <!-- Development targets -->

    <!-- If you want to add more things to build by default, the dependencies of this target is the place to do it. -->
    <target name="build"
       depends="init,process-webapp-sources,jspc,checkstyle,mvn-compile,sql,jar"
       description="Builds everything."/>

    <target name="clean" description="Deletes everything for a fresh start.">

        <delete dir="${build.dir}"/>
        <delete dir="${temp.dir}"/>
        <delete dir="${dist.dir}"/>
    	<delete dir="${main.webapp.web-inf.dir}"/>

    </target>

    <target name="database-apply-diff" depends="init,sql">
        <fail unless="db-diff-file">
            Set "db-diff-file" in build.properties to the diff file you want to execute.
        </fail>

        <sql classpathref="libraries" driver="${db-driver}" url="${db-url}"
            userid="${db-user}" password="${db-pass}" delimiter=";" onerror="abort" src="sql/diff/${db-diff-file}"/>
    </target>

    <target name="database-create" depends="init">

        <sql classpathref="libraries" driver="${db-driver}" url="${db-url-without-db-name}"
             userid="${db-user}" password="${db-pass}" delimiter=";" onerror="abort">
            CREATE DATABASE ${db-name}
        </sql>

        <sql classpathref="libraries" driver="${db-driver}" url="${db-url}"
            userid="${db-user}" password="${db-pass}" delimiter=";" onerror="abort" keepformat="true">
            <transaction src="sql/imcms_6.0_schema.sql"/>
        	<transaction src="sql/imcms_6.0_data.sql"/>
        </sql>

    </target>

    <target name="database-drop" depends="init">

        <sql classpathref="libraries" driver="${db-driver}" url="${db-url-without-db-name}"
             userid="${db-user}" password="${db-pass}" delimiter=";" onerror="abort">
            DROP DATABASE IF EXISTS ${db-name}
        </sql>

    </target>

    <target name="database-recreate" depends="init,database-drop,database-create"/>
		
	<target name="database-recreate-apply-diff" depends="init,database-drop,database-create,database-apply-diff"/>

    <target name="install" depends="init,check-deployroot" description="Install files already built, without running 'build' first.">
        <copy todir="${webapproot}">
            <fileset dir="${maven.build.webapp.dir}"/>
        </copy>
    </target>

    
    <target name="jar" depends="mvn-compile">
        <mkdir dir="${lib}"/>
        <jar destfile="${jar}" basedir="${classes}">
            <metainf dir="${main.webapp.web-inf.dir}/tld"/>
        </jar>
    </target>

    <target name="uninstall" depends="init-version-properties,check-deployroot" description="Removes the installed files from the deployroot, including the war-file.">
        <delete dir="${webapproot}"/>
        <delete file="${deployroot}/${warfilename}"/>
    </target>

    <target name="warinstall" depends="init,bindist-war,check-deployroot" description="Builds and installs the war-file.">
        <copy file="${war}" todir="${deployroot}" overwrite="yes"/>
    </target>

    <!-- Component targets used in build -->

    <target name="apidocs">
        <javadoc sourcepath="${main.java.dir}/" destdir="${apidocs}"
                 windowtitle="imCMS API" classpathref="libraries"
                 encoding="iso-8859-1">
            <fileset dir="${main.java.dir}/" defaultexcludes="yes">
                <include name="com/imcode/imcms/api/**"/>
                <include name="com/imcode/util/**"/>
                <exclude name="**/Test*.java"/>
                <exclude name="**/Mock*.java"/>
            </fileset>
        </javadoc>
    </target>

    <target name="changes">
        <xslt in="docs/changes.xml" style="docs/changes.xsl" out="docs/CHANGES.HTML"/>
    </target>

    <target name="checksumsfile">
        <checksumfiles destfile="${checksumsfile}" digest="MD5" append="true">
            <fileset dir="${build.dir}"/>
        </checksumfiles>
    </target>

    <target name="checkstyle" depends="init">
<!--
        <checkstyle config="docs/checkstyle.xml">
            <fileset dir="${main.java.dir}" includes="**/*.java"/>
        </checkstyle>
-->
    </target>

	
    <target name="jspc" depends="init,process-webapp-sources">
    	<!--
    	<mkdir dir="${temp.dir}/jspc"/>
    	
        // deprecated
        <jasper2
                validateXml="false"
                verbose="9"
                uriroot="${build.dir}"
                webXmlFragment="${temp.dir}/generated_web.xml"
                outputDir="${temp.dir}/jsp"
                classpath="${classes}"/>

        <javac srcdir="${temp.dir}/jsp" destdir="${temp.dir}/jspc"
               classpathref="classes-and-libraries" fork="yes"
               excludes="**/*_included_jsp.java"/>
        
    	
    	
    	// ERRORS
        <jasper2
                validateXml="false"
                verbose="9"
                uriroot="${build.dir}"
                webXmlFragment="${temp.dir}/generated_web.xml"
                outputDir="${temp.dir}/jsp"
                classpath="${classes}"/>    	
    	
        <javac destdir="${temp.dir}/jspc"
               optimize="off"
               debug="on" failonerror="true"
               srcdir="${temp.dir}/jsp" 
    	   excludes="**/*.smap">
          <classpath>
          	<pathelement path="${classes}"/>

            <fileset dir="${lib}">
              <include name="*.jar"/>
            </fileset>
          	
            <fileset dir="${catalina.home}/lib">
              <include name="*.jar"/>
            </fileset>
            <fileset dir="${catalina.home}/bin"> 
              <include name="*.jar"/> 
            </fileset> 
          </classpath>
          <include name="**" />
          <exclude name="tags/**" />
        </javac>
       	-->   		
    </target>   
	
    <target name="sql">
        
        <copy todir="${sql-diff}">
            <fileset dir="sql/diff" includes="diff-*.sql"/>
        </copy>     

        <copy todir="${sql}">
            <fileset file="sql/imcms_5.0_schema.sql"/>
        </copy>
        
        <copy todir="${sql}">
            <fileset file="sql/imcms_5.0_data.sql"/>
        </copy>     

        <copy todir="${sql-sprocs}">
            <fileset dir="sql/sprocs" includes="*.prc"/>
        </copy>
        
    </target>

    <!--  -->
    <target name="process-webapp-sources"
       depends="init,changes"
       description="Translates and copies the webapp sources.">

        <property name="texttemplates" value="${templates}/text"/>
        <property name="demotemplates" value="${texttemplates}/demo"/>
        <property name="imagespattern" value="**/*.png,**/*.jpg,**/*.gif"/>
    	
        <property name="docs" value="${main.webapp.imcms.dir}/docs"/>
        <property name="apisamples" value="${docs}/apisamples"/>
        <property name="apidocs" value="${docs}/api"/>
    	
        <dependset>
            <srcfileset file="${build.properties}"/>
            <targetfileset dir="${conf}">
            	<include name="imcms_*"/>
            	<include name="server.properties"/>
            </targetfileset>
        </dependset>
    	
        <dependset>
            <srcfileset file="${build.properties}"/>
            <targetfileset dir="${webinf.classes}">
            	<include name="logj4*"/>
            </targetfileset>
        </dependset>    	

        <mkdir dir="${main.webapp.imcms.dir}"/>
        <mkdir dir="${main.webapp.login.dir}"/>
        <mkdir dir="${main.webapp.dir}/css"/>
        <mkdir dir="${main.webapp.dir}/images"/>
        <mkdir dir="${main.webapp.dir}/javascript"/>
        <mkdir dir="${main.webapp.dir}/jsp"/>
        <mkdir dir="${main.webapp.dir}/user"/>

        <mkdir dir="${lib}"/>
        <mkdir dir="${main.webapp.web-inf.dir}/includes"/>
        <mkdir dir="${main.webapp.web-inf.dir}/logs"/>
        <mkdir dir="${main.webapp.web-inf.dir}/uploads"/>
        <mkdir dir="${main.webapp.web-inf.dir}/classes"/>
        
        <!-- Copy resources -->
        <copy todir="${main.webapp.web-inf.dir}" file="${main.resources.dir}/applicationContext.xml" filtering="false"/>     
    	<copy todir="${main.webapp.web-inf.dir}" file="${main.resources.dir}/newadmin-servlet.xml" filtering="false"/>      
    	
    	<copy todir="${main.webapp.web-inf.dir}/classes" filtering="true">
    		<fileset dir="${main.resources.dir}" includes="**/*log*, **/*hibernate*"/>
    	</copy>
    	
    	<copy todir="${main.webapp.web-inf.dir}/classes" filtering="true">
    		<fileset dir="${main.java.dir}" includes="*.xml"/>
    	</copy>    	
    	
    	<copy todir="${main.webapp.web-inf.dir}/conf" filtering="true">
    		<fileset dir="${main.resources.dir}" includes="**/*" excludes="**/*log*"/>
    	</copy>    	
    	
        <echo message="${version}" file="${versionfile}"/>

        <copy todir="${main.webapp.dir}" filtering="true">
            <fileset dir="web" excludes="imcms/lang/**,WEB-INF/templates/lang/**,${imagespattern}"/>
        </copy>

        <copy todir="${main.webapp.dir}">
            <fileset dir="web" excludes="imcms/lang/**,WEB-INF/templates/lang/**" includes="${imagespattern}"/>
        </copy>

        <antcall target="web-lang">
            <param name="buildlanguage" value="swe"/>
        </antcall>

        <antcall target="web-lang">
            <param name="buildlanguage" value="eng"/>
        </antcall>

        <mkdir dir="${demotemplates}"/>

        <copy todir="${apisamples}" description="appending .txt on all jsp files making the source browsable">
            <fileset dir="${apisamples}">
               <include name="*.jsp"/>
            </fileset>
            <mapper type="glob" from="*" to="*.txt"/>
        </copy>

        <copy todir="${docs}">
            <fileset dir="${basedir}/docs"/>
        </copy>

        <copy file="${webinf.classes}/${log4j-config}" tofile="${webinf.classes}/log4j.xml"/>

    </target>

    <target name="web-lang" depends="init">

        <imtranslate bundle="${main.resources.dir}/imcms" bundlelanguage="${buildlanguage}"
            starttoken="&lt;? " endtoken=" ?&gt;"
            todir="${templates}/${buildlanguage}" filtering="true" encoding="utf-8">
            <fileset dir="web/WEB-INF/templates/lang"/>
        </imtranslate>

        <imtranslate bundle="${main.resources.dir}/imcms" bundlelanguage="${buildlanguage}"
            starttoken="&lt;? " endtoken=" ?&gt;"
            todir="${main.webapp.imcms.dir}/${buildlanguage}" filtering="true" encoding="utf-8">
            <fileset dir="web/imcms/lang" excludes="${imagespattern}"/>
        </imtranslate>

        <copy todir="${main.webapp.imcms.dir}/${buildlanguage}" filtering="false">
            <fileset dir="web/imcms/lang" includes="${imagespattern}"/>
        </copy>

    </target>

    <!-- Compound targets -->

    <target name="build-install" depends="mvn-package,install" description="Copies the webapp directly into the webapp-directory in the deployroot."/>

    <target name="clean-build" depends="clean,build" description="Runs targets clean and build."/>

    <target name="clean-build-install" depends="clean,build-install" description="Runs targets clean, build, and install."/>

    <!-- Init targets -->

    <target name="init" depends="copy-build.properties,init-version-properties,init-global-filters" description="Handy target for everything else to depend on.">

        <record name="${basedir}/build.log"/>

        <tstamp/>

  	    <fail message="Database schema version property [db.schema.version] must be set and must be in format major-version.minor-version where major-version and minor-version are digits.">
	      <condition>
	        <not>
	       	  <matches string="${db.schema.version}" pattern="^\d\.\d\s*$"/>
	        </not>
	      </condition>
	    </fail>    	
    </target>

    <target name="copy-build.properties" unless="build.properties-available">
        <copy file="build.properties.template" tofile="build.properties"/>
    </target>


    <target name="init-version-properties">
    	
    	<pathconvert targetos="unix" property="wl.path.unix" refid="pom.classpath"/>

    	
    	<echo file="out.txt" message="cp:***${wl.path.unix}"/>
    	
        <propertyregex property="version"
            input="${svnurl}"
            regexp=".URL: .*/tags/(.+)/[^/]+ ."
            override="true"
            replace="\1"
            casesensitive="false"/>
        <propertyregex property="versionnumber"
            input="${version}"
            regexp="^(.*?)(-.*)?$"
            override="true"
            replace="\1"
            casesensitive="false"/>
        <propertyregex property="versionfilesuffix"
            input="${version}"
            regexp="(.+)"
            override="true"
            replace="-\1"
            casesensitive="false"/>
        
        <!-- Locations for the final packages -->
        <property name="warfilename" value="imcms${versionfilesuffix}.war"/>
        <property name="war" value="${dist.dir}/${warfilename}"/>
        <property name="jar" value="${lib}/imcms${versionfilesuffix}.jar"/>

        <property name="sprocs-sql" value="${sql}/imcms-sprocs${versionfilesuffix}.sql"/>

        <property name="bindist-jar" value="${dist.dir}/imcms${versionfilesuffix}.jar"/>
        <property name="bindist-api-jar" value="${dist.dir}/imcms${versionfilesuffix}-api.jar"/>
        <property name="bindist-util-jar" value="${dist.dir}/imcms${versionfilesuffix}-util.jar"/>

        <property name="bindist-zip" value="${dist.dir}/imcms${versionfilesuffix}.zip"/>
        <property name="bindist-tgz" value="${dist.dir}/imcms${versionfilesuffix}.tar.gz"/>

        <property name="srcdist" value="imcms${versionfilesuffix}-src"/>
        <property name="srcdist-zip" value="${dist.dir}/${srcdist}.zip"/>
        <property name="srcdist-tgz" value="${dist.dir}/${srcdist}.tar.gz"/>
    	
    	<if>
    	 <equals arg1="${version}" arg2="" />
    	 <then>
    	 	<property name="maven.artifact.version" value="${pom.version}"/>
    	 </then>
    	 <else>
    	 	<property name="maven.artifact.version" value="${version}"/>
    	 </else>
    	</if>
    	
       <echo message="init-version-properties: version: ${version}"/>
       <echo message="init-version-properties: versionnumber: ${versionnumber}"/>
       <echo message="init-version-properties: versionfilesuffix: ${versionfilesuffix}"/>             	
 	   <echo message="init-version-properties: maven.artifact.version: ${maven.artifact.version}"/>
    </target>

    <target name="init-global-filters"
        depends="check-build-properties,init-version-properties">
    	<filter filtersfile="build.filters.properties"/>
    	
        <filter token="showHibernateSQL" value="${showHibernateSQL}"/>
    	<filter token="defaultlanguage" value="${defaultlanguage}"/>
    	
    	<filter token="db.schema.version" value="${db.schema.version}"/>
        
        <filter token="documentationwebappurl" value="http://${documentation-host}/${versionnumber}"/>
        <filter token="documentationurl" value="http://${documentation-host}/${versionnumber}"/>

        <filter token="deny-multiple-user-login" value="${deny-multiple-user-login}"/>

        <filter token="db-driver" value="${db-driver}"/>
        <filter token="db-url" value="${db-url}"/>
        <filter token="db-name" value="${db-name}"/>
        <filter token="db-user" value="${db-user}"/>
        <filter token="db-pass" value="${db-pass}"/>
        <filter token="db-maxconnections" value="${db-maxconnections}"/>

        <filter token="external-authenticator" value="${external-authenticator}"/>
        <filter token="external-user-and-role-registry" value="${external-user-and-role-registry}"/>

        <filter token="ldap-url" value="${ldap-url}"/>
        <filter token="ldap-bind-dn" value="${ldap-bind-dn}"/>
        <filter token="ldap-password" value="${ldap-password}"/>
        <filter token="ldap-user-object-class" value="${ldap-user-object-class}"/>
        <filter token="ldap-attribute-login-name" value="${ldap-attribute-login-name}"/>


        <filter token="secondary-external-authenticator" value="${secondary-external-authenticator}"/>
        <filter token="secondary-external-user-and-role-registry" value="${secondary-external-user-and-role-registry}"/>

        <filter token="secondary-ldap-url" value="${secondary-ldap-url}"/>
        <filter token="secondary-ldap-bind-dn" value="${secondary-ldap-bind-dn}"/>
        <filter token="secondary-ldap-password" value="${secondary-ldap-password}"/>
        <filter token="secondary-ldap-user-object-class" value="${secondary-ldap-user-object-class}"/>
        <filter token="secondary-ldap-attribute-login-name" value="${secondary-ldap-attribute-login-name}"/>


        <filter token="smtp-server" value="${smtp-server}"/>

        <filter token="servermaster-name" value="${servermaster-name}"/>
        <filter token="servermaster-email" value="${servermaster-email}"/>

        <filter token="webmaster-name" value="${webmaster-name}"/>
        <filter token="webmaster-email" value="${webmaster-email}"/>
    </target>

    <!-- Check targets -->

    <target name="check-build-properties" unless="build-properties-up-to-date">

        <uptodate targetfile="${build.properties}" property="build-properties-up-to-date">
            <srcfiles dir="${basedir}" includes="build.properties.template"/>
        </uptodate>

        <fail unless="build-properties-up-to-date">
            'build.properties.template' is newer than 'build.properties'. (See docs/BUILD.TXT for details.)
            Copy 'build.properties.template' to 'build.properties' and edit it!
        </fail>

    </target>

    <target name="check-deployroot" unless="deployroot">

        <fail message="Set 'deployroot' in '${build.properties}'!"/>

    </target>

    <target name="check-web-xml-valid">
        <xmlvalidate file="web/WEB-INF/web.xml" classpathref="libraries">
            <dtd
                publicId="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                location="javax/servlet/resources/web-app_2_3.dtd"/>
        </xmlvalidate>
    </target>
	
	
	<!-- ======================================================= -->
	<!-- Maven based tasks -->
	<!-- ======================================================= -->
    <condition property="ant.maven.executable" value="mvn.bat">
        <os family="windows"/>
    </condition>

    <property name="ant.maven.executable" value="mvn"/>

    <macrodef name="maven">
        <attribute name="goal"/>
        <sequential>
            <exec executable="${ant.maven.executable}" failonerror="true">
                <arg value="-Dmaven.test.skip=true"/>
            	<arg value="@{goal}"/>
            </exec>
        </sequential>
    </macrodef>
			
	<target name="mvn-compile">
		<maven goal="compile"/>
	</target>
	
	<target name="mvn-package" depends="process-webapp-sources">
		<maven goal="package"/>
	</target>
	
	<target name="mvn-install" depends="process-webapp-sources">
		<maven goal="install"/>
	</target>
	
	<target name="mvn-deploy" depends="process-webapp-sources">
		<maven goal="deploy"/>
	</target>	
	
	<target name="mvn-install-all" depends="mvn-package">
        <exec executable="${ant.maven.executable}" failonerror="true">            
        	<arg value="install:install-file"/>
        	
        	<arg value="-Dfile=${maven.build.war}"/>
        	<arg value="-DgroupId=${pom.groupId}"/>
        	<arg value="-DartifactId=${pom.artifactId}"/> 
        	<arg value="-Dversion=${maven.artifact.version}"/>
        	
        	<arg value="-Dpackaging=war"/>        	
        </exec>		
		
        <exec executable="${ant.maven.executable}" failonerror="true">            
        	<arg value="install:install-file"/>
        	
        	<arg value="-Dfile=${maven.build.jar}"/>
        	<arg value="-DgroupId=${pom.groupId}"/>
        	<arg value="-DartifactId=${pom.artifactId}"/> 
        	<arg value="-Dversion=${maven.artifact.version}"/>
        	
        	<arg value="-Dclassifier=classes"/>
        	<arg value="-Dpackaging=jar"/>        	
        </exec>		
	</target>
	
	<target name="mvn-deploy-all" depends="mvn-package">
		<exec executable="${ant.maven.executable}" failonerror="true"> 
	        <arg value="deploy:deploy-file"/>
			
	        <arg value="-DrepositoryId=${maven.repo.id}"/>
	        <arg value="-Durl=${maven.repo.url}"/>						
			<arg value="-Dfile=${maven.build.war}"/>
			
			<arg value="-DgroupId=${pom.groupId}"/>
			<arg value="-DartifactId=${pom.artifactId}"/> 
	        <arg value="-Dversion=${maven.artifact.version}"/>
	        <arg value="-Dpackaging=war"/>
		</exec>	
		
        <exec executable="${ant.maven.executable}" failonerror="true">            
            <arg value="deploy:deploy-file"/>
        	
	        <arg value="-DrepositoryId=${maven.repo.id}"/>
	        <arg value="-Durl=${maven.repo.url}"/>						
        	<arg value="-Dfile=${maven.build.jar}"/>
        	
        	<arg value="-DgroupId=${pom.groupId}"/>
	        <arg value="-DartifactId=${pom.artifactId}"/> 
	        <arg value="-Dversion=${maven.artifact.version}"/>

            <arg value="-Dpackaging=jar"/>
        	<arg value="-Dclassifier=classes"/>
        </exec>		
	</target>
</project>