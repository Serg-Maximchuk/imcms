<?xml version='1.0' encoding='iso-8859-1'?>

<!-- The Ant 'build.xml'-file for imCMS -->

<project name="imCMS" default="dist" basedir=".">

  <!-- Paths. Later ones are built on earlier ones. -->

  <!-- The directory to build in. -->
  <property name="build"          value="${basedir}/build"/>

  <!-- Where to put generated documentation -->
  <property name="doc"            value="${basedir}/doc"/>

  <!-- The webroot. Everything put here can be seen by any visitor. -->
  <property name="webroot"        value="${build}"/>

  <property name="images"         value="${webroot}/images"/>
  <property name="login"          value="${webroot}/login"/>
  <property name="css"            value="${webroot}/css"/>
  <property name="user"           value="${webroot}/user"/>
  <property name="adminbuttons"   value="${webroot}/admin"/>


  <!-- 'WEB-INF' - Everything put here is private to the webapp -->
  <property name="WEB-INF"        value="${webroot}/WEB-INF"/>

  <property name="conf"           value="${WEB-INF}/conf"/>
  <property name="classes"        value="${WEB-INF}/classes"/>
  <property name="lib"            value="${WEB-INF}/lib"/>
  <property name="templates"      value="${WEB-INF}/templates"/>
  <property name="includes"       value="${WEB-INF}/includes"/>
  <property name="fortunes"       value="${WEB-INF}/fortunes"/>
  <property name="uploads"        value="${WEB-INF}/uploads"/>
  <property name="logs"           value="${WEB-INF}/logs"/>

  <!-- The language to install for, and where to install from and to. -->
  <property name="language"	  value="se"/>
  <property name="srclanguage"	  value="sv"/>
  <property name="languagetemplates" value="${templates}/${language}"/>

  <!-- Paths for templates for the plugins -->
  <property name="conference-templates" value="${languagetemplates}/102"/>
  <property name="chat-templates"       value="${languagetemplates}/103"/>
  <property name="billboard-templates"  value="${languagetemplates}/104"/>
  <property name="postcard-templates"   value="${languagetemplates}/105"/>
  <property name="fortune-templates"    value="${languagetemplates}/106"/>

  <!-- Paths for other templates -->
  <property name="admintemplates" value="${languagetemplates}/admin"/>
  <property name="texttemplates"  value="${templates}/text"/>
  <property name="demotemplates"  value="${texttemplates}/demo"/>

  <!--
    Read in 'build.properties' and set the properties therein.
    Those properties are used as bases for later properties in this file.
  -->
  <property name="build.properties"     value="build.properties"/>
  <property file="${build.properties}"/>

  <!-- URIs -->
  <property name="servleturl"     value="${rooturl}/servlet"/>
  <property name="loginurl"       value="${rooturl}/login"/>
  <property name="imageurl"       value="${rooturl}/images"/>
  <property name="adminbuttonsurl" value="${rooturl}/admin"/>


  <!-- Filenames -->
  <property name="wardist" value="${webappname}.war"/>

  <property name="dist-sql" value="${webappname}.sql"/>
  <property name="sprocs-sql" value="sprocs.sql"/>
  <property name="help-sql" value="help.sql"/>

  <!-- Where to install imCMS -->
  <property name="webapproot" value="${deployroot}/${webappname}"/>


  <!-- A handy target to have everything else depend on, just in case. -->
  <target name="init"
	  depends="check-build-properties,fail-build-properties"
	  description="Handy target for everything else to depend on.">

    <tstamp/>

  </target>


  <!-- Checks that build.properties is up-to-date. -->
  <target name="check-build-properties"
	  description="Checks that ${build.properties} is up-to-date.">

    <uptodate targetfile="${build.properties}" property="build-properties-up-to-date">
      <srcfiles dir="${basedir}" includes="${build.properties}.template,build.xml"/>
    </uptodate>

  </target>


  <!-- Fail unless build.properties is up-to-date. -->
  <target name="fail-build-properties"
	  description="Checks that ${build.properties} is newer than ${build.properties}.template and build.xml."
	  unless="build-properties-up-to-date">

    <fail>
      '${build.properties}.template' and/or 'build.xml' are newer than '${build.properties}'.
      Copy '${build.properties}.template' to '${build.properties}' and edit it!
      (See INSTALL.TXT for details.)
    </fail>

  </target>

  <!-- Checks that 'deployroot' is set. -->
  <target name="check-deployroot"
	  description="Checks that deployroot is set."
	  unless="deployroot">

    <fail message="Set 'deployroot' in '${build.properties}'!"/>

  </target>


  <!-- Checks that 'webappname' is set. -->
  <target name="check-webappname"
	  description="Checks that webappname is set."
	  unless="webappname">

    <fail>
      Set "webappname" in "${build.properties}"!
    </fail>

  </target>


  <!-- Build the war-file -->
  <target name="dist"
	  depends="init,build,check-webappname"
	  description="Packages a complete distribution.">

    <war warfile="${wardist}"
	 basedir="build"
	 excludes="${WEB-INF}/web.xml"
	 webxml="install/web.xml"/>

    <echo>Done packaging distribution '${wardist}'.</echo>

    <echo>Using ${ant.version} with JVM ${ant.java.version}.</echo>

  </target>


  <!-- If you want to add more things to build by default, the dependencies of this target is the place to do it. -->
  <target name="build"
	  depends="init,server,servlets,templates,libraries,web,conf,dir,conference,chat,billboard,postcard,help,fortune,sql,web.xml"
	  description="Builds everything.">

  </target>


  <!-- Copies the deploy-descriptor to its correct location. -->
  <target name="web.xml" depends="init">
    <copy file="install/web.xml" todir="${WEB-INF}" overwrite="yes"/>
  </target>


  <!-- Delete everything built by the 'build'-target. -->
  <target name="clean" description="Deletes everything for a fresh start.">
    <delete dir="${build}"/>
    <delete>
	<fileset dir="." includes="${wardist},${dist-sql},${help-sql},${sprocs-sql}"/>
    </delete>
  </target>


  <!-- Install the war-file -->
  <target name="install-war" depends="init,dist,check-deployroot,check-webappname" description="Copies the WAR-package into the deployroot.">
    <copy file="${wardist}" todir="${deployroot}" overwrite="yes"/>
  </target>


  <!-- Install the webapp, bypassing the war-file -->
  <target name="install" depends="init,build,check-deployroot" description="Copies the webapp directly into the webapp-directory in the deployroot.">
    <copy todir="${webapproot}">
      <fileset dir="${build}"/>
    </copy>
  </target>


  <!-- Delete an installed webapp -->
  <target name="uninstall" depends="check-deployroot,check-webappname" description="Removes the installed files from the deployroot, including the war-file.">
    <delete dir="${webapproot}"/>
    <delete file="${deployroot}/${wardist}"/>
  </target>


  <!-- Generate documentation -->
  <target name="doc"
	  depends="init"
	  description="Generates javadoc.">
    <javadoc destdir="${doc}">
      <package name="imcode.util"/>
      <package name="imcode.util.log"/>
      <package name="imcode.server"/>
      <package name="imcode.server.parser"/>
      <package name="imcode.external.diverse"/>
      <package name="imcode.external.chat"/>
      <package name=""/>
      <classpath>
	  <fileset dir="install/lib">
	    <include name="**/*.jar"/>
	  </fileset>
      </classpath>
      <sourcepath>
	 <pathelement path="server/src/"/>
	 <pathelement path="servlets/"/>
      </sourcepath>
    </javadoc>
  </target>


  <!-- Build extra tools (like ant-tasks) needed for building. -->
  <target name="tools">
    <ant dir="tools"/>
  </target>


  <!-- Generates the sql-scripts -->
  <target name="sql" depends="init,check-webappname,tools" description="Concatenates the SQL-scripts into one large script.">
    <taskdef name="cat" classname="Cat" classpath="tools"/>
    <cat destfile="${dist-sql}" orderby="path">
      <fileset dir="sql/tables" includes="tables.ascii.sql"/>
      <fileset dir="sql/sprocs"/>
      <fileset dir="sql/data" includes="types.sql"/>
      <fileset dir="sql/data" includes="newdb.sql"/>
	<fileset dir="sql/index"/>
    </cat>
    <cat destfile="${sprocs-sql}" orderby="path">
      <fileset dir="sql/sprocs"/>
    </cat>
    <copy file="sql/help/help.sql" tofile="${help-sql}"/>
  </target>


  <!-- Builds the 'non-servlets'. -->
  <target name="server"
	  depends="init,dir"
	  description="Builds the server and utility classes.">

    <mkdir dir="${classes}"/>
    <javac srcdir="server/src"
	   destdir="${classes}"
	   debug="${debug}"
	   optimize="${optimize}"
	   deprecation="${deprecation}">
      <classpath>
	<pathelement path="${classes}"/>
	  <fileset dir="install/lib">
	    <include name="**/*.jar"/>
	  </fileset>
      </classpath>
    </javac>

  </target>


  <!-- Builds the servlets. -->
  <target name="servlets"
	  depends="init,server"
	  description="Builds the servlets.">

    <mkdir dir="${classes}"/>
    <javac srcdir="servlets"
	   destdir="${classes}"
	   includes="*.java"
	   classpath="${classes}"
	   debug="${debug}"
	   optimize="${optimize}"
	   deprecation="${deprecation}">

      <classpath>
	<pathelement path="${classes}"/>
	  <fileset dir="install/lib">
	    <include name="**/*.jar"/>
	  </fileset>
      </classpath>

    </javac>

  </target>


  <!-- Copies the libraries (jar-files) needed for building. -->
  <target name="libraries"
	  depends="init,dir"
	  description="Copies the jar-files.">

    <copy todir="${lib}">
      <fileset dir="install/lib"/>
    </copy>

  </target>


  <!-- Copies and filters the config-files with the correct properties. -->
  <target name="conf"
	  depends="init"
	  description="Builds the config-directory.">
    <copy todir="${conf}">
      <fileset dir="install/conf">
	<exclude name="policy"/>
      </fileset>
      <filterset>

	<filter token="rooturl" value="${rooturl}"/>
	<filter token="servleturl" value="${servleturl}"/>
	<filter token="loginurl" value="${loginurl}"/>
	<filter token="imageurl" value="${imageurl}"/>

	<filter token="db-host" value="${db-host}"/>
	<filter token="db-port" value="${db-port}"/>
	<filter token="db-name" value="${db-name}"/>
	<filter token="db-user" value="${db-user}"/>
	<filter token="db-pass" value="${db-pass}"/>

	<filter token="plugin-db-host" value="${plugin-db-host}"/>
	<filter token="plugin-db-port" value="${plugin-db-port}"/>
	<filter token="plugin-db-name" value="${plugin-db-name}"/>
	<filter token="plugin-db-user" value="${plugin-db-user}"/>
	<filter token="plugin-db-pass" value="${plugin-db-pass}"/>

	<filter token="smtp-server" value="${smtp-server}"/>

      </filterset>
    </copy>
  </target>


  <!-- Creates the directories and copies the files that are to be public. -->
  <target name="web"
	  depends="init"
	  description="Creates the public web">
    <mkdir dir="${images}"/>
    <mkdir dir="${login}"/>
    <mkdir dir="${css}"/>
    <mkdir dir="${user}"/>
    <copy file="templates/login/index.html" todir="${login}">
       <filterset>
	<filter token="servleturl" value="${servleturl}"/>
	<filter token="imageurl" value="${imageurl}"/>
      </filterset>
    </copy>
    <copy todir="${images}">
      <fileset dir="install/htdocs/images">
	<patternset>
	  <include name="*.gif"/>
	</patternset>
      </fileset>
    </copy>
    <copy todir="${adminbuttons}">
      <fileset dir="install/htdocs/imcms">
	<patternset>
	  <include name="*.gif"/>
	</patternset>
      </fileset>
    </copy>
    <copy todir="${webroot}">
      <fileset dir="templates">
	<patternset>
	  <include name="*.htm"/>
	  <include name="*.html"/>
	</patternset>
      </fileset>
      <filterset>
	<filter token="servleturl" value="${servleturl}"/>
	<filter token="loginurl" value="${loginurl}"/>
	<filter token="imageurl" value="${imageurl}"/>
      </filterset>
    </copy>

  </target>


  <!-- Copies and filters all non-plugin templates. -->
  <target name="templates"
	  depends="init,dir"
	  description="Copies the templates.">

    <mkdir dir="${admintemplates}"/>
    <mkdir dir="${demotemplates}"/>

    <copy todir="${admintemplates}/adminbuttons">
      <fileset dir="templates/${srclanguage}/adminbuttons"/>
      <filterset>

	<filter token="adminbuttonsurl" value="${adminbuttonsurl}"/>
	<filter token="loginurl" value="${loginurl}"/>
	<filter token="imageurl" value="${imageurl}"/>

      </filterset>
    </copy>

    <replace dir="${admintemplates}/adminbuttons" excludes="adminbuttons.html"
	     token="&#10;" value=""/>

    <replace dir="${admintemplates}/adminbuttons" excludes="adminbuttons.html"
	     token="&#13;" value=""/>

    <copy todir="${admintemplates}/permissions">
      <fileset dir="templates/${srclanguage}/permissions"/>
      <filterset>
	<filter token="loginurl" value="${loginurl}"/>
	<filter token="imageurl" value="${imageurl}"/>
      </filterset>
    </copy>

   <copy todir="${admintemplates}/sections">
      <fileset dir="templates/${srclanguage}/sections"/>
      <filterset>
	<filter token="loginurl" value="${loginurl}"/>
	<filter token="imageurl" value="${imageurl}"/>
      </filterset>
    </copy>
    
    <copy todir="${admintemplates}/search">
      <fileset dir="templates/${srclanguage}/search"/>
      <filterset>
	<filter token="loginurl" value="${loginurl}"/>
	<filter token="imageurl" value="${imageurl}"/>
      </filterset>
    </copy>

    <copy todir="${admintemplates}">
      <fileset dir="templates/${srclanguage}">
	<patternset>
	  <include name="*.htm"/>
	  <include name="*.html"/>
	  <include name="*.ini"/>
	  <include name="*.txt"/>
	</patternset>
      </fileset>
      <filterset>
	<filter token="loginurl" value="${loginurl}"/>
	<filter token="imageurl" value="${imageurl}"/>
      </filterset>
    </copy>

    <copy todir="${texttemplates}">
      <fileset dir="templates/text"/>
      <filterset>
	<filter token="loginurl" value="${loginurl}"/>
	<filter token="imageurl" value="${imageurl}"/>
      </filterset>
    </copy>

  </target>


  <!-- Create some empty directories that will be used by imCMS. -->
  <target name="dir"
	  depends="init"
	  description="Creates some empty directories necessary for imCMS.">
    <mkdir dir="${includes}"/>
    <mkdir dir="${fortunes}"/>
    <mkdir dir="${uploads}"/>
    <mkdir dir="${logs}"/>
  </target>


  <!-- Builds the 'conference'-plugin. -->
  <target name="conference"
	  depends="init,conference-servlets,conference-templates,conference-images"
	  description="Builds the conference."/>


  <!-- The conference-servlets. -->
  <target name="conference-servlets"

	  depends="init,server"
	  description="Builds the conference-servlets.">

    <mkdir dir="${classes}"/>
    <javac srcdir="servlets/conf"
	   destdir="${classes}"
	   includes="*.java"
	   classpath="${classes}"
	   debug="${debug}"
	   optimize="${optimize}"
	   deprecation="${deprecation}">

      <classpath>
	<pathelement path="${classes}"/>
	  <fileset dir="install/lib">
	    <include name="**/*.jar"/>
	  </fileset>
      </classpath>
    </javac>

  </target>


  <!-- The conference-templates. -->
  <target name="conference-templates"
	  depends="init"
	  description="Copies the conference-templates.">
    <copy todir="${conference-templates}">
      <fileset dir="templates/${srclanguage}/conf" excludes="original/images/"/>
    </copy>
  </target>


  <!-- The conference-images. -->
  <target name="conference-images"
	  depends="init,conference-templates"
	  description="Copies the conference-images.">
    <copy todir="${images}/${language}/102/original">
      <fileset dir="templates/${srclanguage}/conf/original/images" includes="*"/>
    </copy>
  </target>


  <!-- Builds the 'chat'-plugin. -->
  <target name="chat"
	  depends="init,chat-servlets,chat-templates"
	  description="Builds the chat."/>


  <!-- The chat-servlets -->
  <target name="chat-servlets"
	  depends="init,server"
	  description="Builds the chat-servlets.">

    <mkdir dir="${classes}"/>
    <javac srcdir="servlets/chat"
	   destdir="${classes}"
	   includes="*.java"
	   classpath="${classes}"
	   debug="${debug}"
	   optimize="${optimize}"
	   deprecation="${deprecation}">

      <classpath>
	<pathelement path="${classes}"/>
	  <fileset dir="install/lib">
	    <include name="**/*.jar"/>
	  </fileset>
      </classpath>
    </javac>

  </target>


  <!-- The chat-templates. -->
  <target name="chat-templates"
	  depends="init"
	  description="Copies the chat-templates.">
    <copy todir="${chat-templates}/original">
      <fileset dir="templates/${srclanguage}/chat/orginal"/>
    </copy>
    <copy todir="${chat-templates}">
      <fileset dir="templates/${srclanguage}/chat" excludes="orginal/"/>
    </copy>
  </target>


  <!-- Builds the 'billboard'-plugin. -->
  <target name="billboard"
	  depends="init,billboard-servlets,billboard-templates,billboard-images"
	  description="Builds the billboard."/>


  <!-- The billboard-servlets. -->
  <target name="billboard-servlets"
	  depends="init,server"
	  description="Builds the billboard-servlets.">

    <mkdir dir="${classes}"/>
    <javac srcdir="servlets/billBoard"
	   destdir="${classes}"
	   includes="*.java"
	   classpath="${classes}"
	   debug="${debug}"
	   optimize="${optimize}"
	   deprecation="${deprecation}">

      <classpath>
	<pathelement path="${classes}"/>
	  <fileset dir="install/lib">
	    <include name="**/*.jar"/>
	  </fileset>
      </classpath>
    </javac>

  </target>


  <!-- The billboard-templates. -->
  <target name="billboard-templates"
	  depends="init"
	  description="Copies the billboard-templates.">
    <copy todir="${billboard-templates}/original">
      <fileset dir="templates/${srclanguage}/billBoard/ORIGINAL" excludes="images/"/>
    </copy>
    <copy todir="${billboard-templates}">
      <fileset dir="templates/${srclanguage}/billBoard" excludes="ORIGINAL/"/>
    </copy>
  </target>


  <!-- The billboard-images. -->
  <target name="billboard-images"
	  depends="init,billboard-templates"
	  description="Copies the billboard-images.">
    <copy todir="${images}/${language}/104/original">
      <fileset dir="templates/${srclanguage}/billBoard/ORIGINAL/images" includes="*"/>
    </copy>
  </target>


  <!-- Builds the 'postcard'-plugin. -->
  <target name="postcard"
	  depends="init,postcard-templates"
	  description="Builds the postcard."/>


  <!-- The postcard-templates. -->
  <target name="postcard-templates"
	  depends="init"
	  description="Copies the postcard-templates.">
    <copy todir="${postcard-templates}">
      <fileset dir="templates/${srclanguage}/postcard"/>
    </copy>
  </target>


  <!-- Copies the files for the online-help. -->
  <target name="help" depends="init,help-images"/>


  <!-- The images for the online-help. -->
  <target name="help-images"
	depends="init,web"
	description="Copies the help-images.">
     <copy todir="${images}/${language}/helpimages">
	<fileset dir="install/htdocs/imcms/helpimages" includes="*"/>
    </copy>
  </target>


  <!-- Copies the files for the 'fortune'-plugin. -->
  <target name="fortune" depends="init,fortune-templates"/>


  <!-- The fortune-templates.-->
  <target name="fortune-templates"
	depends="init,web"
	description="Copies the fortune-templates.">
	<copy todir="${fortune-templates}">
	  <fileset dir="templates/${srclanguage}/fortunes"/>
	</copy>
  </target>

</project>
