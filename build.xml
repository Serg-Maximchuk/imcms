<?xml version='1.0' encoding='iso-8859-1'?>

<!-- The Ant 'build.xml'-file for imCMS -->

<project name="imCMS" default="dist" basedir=".">

    <!-- The current version of imCMS. -->
    <property name="version"               value="$$Name$"/>

    <!-- Paths. Later ones are built on earlier ones. -->

    <!-- The directory to build in. -->
    <property name="build"                 value="${basedir}/build"/>
    <property name="dist"                  value="${basedir}/dist"/>

    <!-- Where to put generated documentation -->
    <property name="doc"                   value="${basedir}/doc"/>

    <!-- The webroot. Everything put here can be seen by any visitor. -->
    <property name="webroot"               value="${build}"/>

    <property name="images"                value="${webroot}/images"/>
    <property name="login"                 value="${webroot}/login"/>
    <property name="css"                   value="${webroot}/css"/>
    <property name="user"                  value="${webroot}/user"/>
    <property name="javascript"            value="${webroot}/javascript"/>
    <property name="jsp"                   value="${webroot}/jsp"/>
    <property name="imcms"                 value="${webroot}/imcms"/>
    <property name="imcmscss"              value="${imcms}/css"/>
    <property name="imcmsimages"           value="${imcms}/images"/>
    <property name="imcmsscripts"          value="${imcms}/scripts"/>
    <property name="imcmsjsp"              value="${imcms}/jsp"/>
    <property name="imcmshtml"             value="${imcms}/html"/>

    <property name="adminbuttons"          value="${imcmsimages}/admin"/>
    <property name="readrunner"	   	       value="${webroot}/readrunner"/>
    <property name="shop"	               value="${webroot}/shop"/>
    <property name="htmleditor"            value="${webroot}/htmleditor"/>
    <property name="poll"	               value="${webroot}/poll"/>
    <property name="apisamples"	           value="${webroot}/apisamples"/>

    <!-- 'WEB-INF' - Everything put here is private to the webapp -->
    <property name="WEB-INF"               value="${webroot}/WEB-INF"/>

    <property name="conf"                  value="${WEB-INF}/conf"/>
    <property name="classes"               value="${WEB-INF}/classes"/>
    <property name="lib"                   value="${WEB-INF}/lib"/>
    <property name="templates"             value="${WEB-INF}/templates"/>
    <property name="includes"              value="${WEB-INF}/includes"/>
    <property name="fortunes"              value="${WEB-INF}/fortunes"/>
    <property name="uploads"               value="${WEB-INF}/uploads"/>
    <property name="logs"                  value="${WEB-INF}/logs"/>

    <!-- Paths for other templates -->
    <property name="texttemplates"         value="${templates}/text"/>
    <property name="demotemplates"         value="${texttemplates}/demo"/>

    <property name="languagetemplates"     value="${templates}/se"/>
    <property name="admintemplates"        value="${languagetemplates}/admin"/>
    <property name="searchtemplates"       value="${admintemplates}/search/original"/>

    <property name="readrunnertemplates"   value="${admintemplates}/readrunner"/>

    <!-- Paths for templates for the plugins -->
    <property name="conference-templates"  value="${languagetemplates}/102"/>
    <property name="chat-templates"        value="${languagetemplates}/103"/>
    <property name="billboard-templates"   value="${languagetemplates}/104"/>
    <property name="postcard-templates"    value="${languagetemplates}/105"/>
    <property name="fortune-templates"     value="${languagetemplates}/106"/>


    <!-- Read in 'build.properties' and set the properties therein. -->
    <!-- Those properties are used as bases for later properties in this file. -->
    <property name="build.properties"      value="build.properties"/>
    <property file="${build.properties}"/>

    <!-- URIs -->
    <property name="servleturl"               value="${rooturl}/servlet"/>
    <property name="loginurl"                 value="${rooturl}/login"/>
    <property name="imageurl"                 value="${rooturl}/images"/>
    <property name="cssurl"                   value="${rooturl}/css"/>
    <property name="javascripturl"            value="${rooturl}/javascript"/>
    <property name="jspurl"                   value="${rooturl}/jsp"/>
    <property name="postcardsurl"             value="${rooturl}/postcards"/>
    <property name="imcmsimageurl"            value="${rooturl}/imcms/images"/>
    <property name="imcmshtmlurl"             value="${rooturl}/imcms/html"/>
    <property name="imcmsscripturl"           value="${rooturl}/imcms/scripts"/>
    <property name="imcmscssurl"              value="${rooturl}/imcms/css"/>
    <property name="imcmsjspurl"              value="${rooturl}/imcms/jsp"/>
    <property name="shopurl"                  value="${rooturl}/shop"/>
    <property name="adminbuttonsurl"          value="${imcmsimageurl}/admin"/>
    <property name="readrunnerurl"	          value="${rooturl}/readrunner"/>
    <property name="readrunnerimagesurl"      value="${readrunnerurl}/images"/>
    <property name="readrunnercssurl"         value="${readrunnerurl}/css"/>
    <property name="readrunnerjsurl"          value="${readrunnerurl}/javascript"/>


    <!-- Locations for the final packages -->
    <property name="warfile"                  value="${webappname}.war"/>
    <property name="wardist"                  value="${dist}/${warfile}"/>

    <property name="jardist"                  value="${dist}/${webappname}.jar"/>
    <property name="jarapidist"               value="${dist}/${webappname}-api.jar"/>

    <property name="srcdistfile"              value="${webappname}-src"/>
    <property name="srczipdist"               value="${dist}/${srcdistfile}.zip"/>
    <property name="srctgzdist"               value="${dist}/${srcdistfile}.tar.gz"/>
    <property name="srctbz2dist"              value="${dist}/${srcdistfile}.tar.bz2"/>

    <property name="srcincludes"              value="${basedir}/MANIFEST.TXT"/>

    <property name="dist-sql"                 value="${dist}/imcms.sql"/>
    <property name="sprocs-sql"               value="${dist}/sprocs.sql"/>


    <path id="libraries">
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>


    <path id="classes-and-libraries">
        <pathelement path="${classes}"/>
        <path refid="libraries"/>
    </path>


    <!-- Where to install imCMS -->
    <property name="webapproot"               value="${deployroot}/${webappname}"/>

    <!-- versionnumber : imCMS version without sufix, only the number ( 1.7.4) -->
    <property name="versionnumber"         value=""/>

    <!-- A target to use for reformat a properties   -->
    <target name="reformatproperties" >
        <taskdef name="propertyregex" classname="net.sf.antcontrib.property.RegexTask" classpath="install/lib/ant-contrib-0.5.jar"/>
        <propertyregex property="versionnumber"
                 input="${version}"
                 regexp=".Name: v(.*)-.*"
                 override = "true"
                 replace="\1"
                 casesensitive="false" />
       <propertyregex property="versionnumber"
                 input="${versionnumber}"
                 regexp="_"
                 override = "true"
                 replace="."
                 global="true"
                 casesensitive="false" />
        <echo message="${versionnumber}" />

    </target>


    <!-- A handy target to have everything else depend on, just in case. -->
    <target name="init" depends="reformatproperties,global-filters" description="Handy target for everything else to depend on.">

        <!-- Record the build to a log-file. -->
        <record name="${basedir}/build.log"/>

        <tstamp/>

        <dependset>
            <srcfileset file="${basedir}/build.xml"/>
            <targetfileset dir="${build}"/>
        </dependset>

        <available classname="junit.framework.Test" classpathref="libraries" property="junit-available"/>

    </target>


    <!-- Defines global filters. -->
    <target name="global-filters"
            depends="check-build-properties"
	    description="Defines global filters.">

	<!-- Global filters -->
	<filter token="rooturl"             value="${rooturl}"/>
	<filter token="servleturl"          value="${servleturl}"/>
	<filter token="loginurl"            value="${loginurl}"/>
	<filter token="imageurl"            value="${imageurl}"/>
	<filter token="cssurl"              value="${cssurl}"/>
	<filter token="postcardsurl"        value="${postcardsurl}"/>
	<filter token="adminbuttonsurl"     value="${adminbuttonsurl}"/>
	<filter token="imcmsimageurl"       value="${imcmsimageurl}"/>
    <filter token="imcmshtmlurl"        value="${imcmshtmlurl}"/>
    <filter token="imcmsscripturl"      value="${imcmsscripturl}"/>
    <filter token="imcmscssurl"         value="${imcmscssurl}"/>
    <filter token="imcmsjspurl"         value="${imcmsjspurl}"/>
	<filter token="javascripturl"       value="${javascripturl}"/>
    <filter token="jspurl"              value="${jspurl}"/>

    <filter token="documentationurl"    value="http://${documentation-host}/${versionnumber}/servlet/"/>

	<filter token="readrunnerurl"       value="${readrunnerurl}"/>
	<filter token="readrunnerimagesurl" value="${readrunnerimagesurl}"/>
	<filter token="readrunnercssurl"    value="${readrunnercssurl}"/>
	<filter token="readrunnerjsurl"     value="${readrunnerjsurl}"/>

	<filter token="db-driver"           value="${db-driver}"/>
	<filter token="db-url"              value="${db-url}"/>
	<filter token="db-host"             value="${db-host}"/>
	<filter token="db-port"             value="${db-port}"/>
	<filter token="db-name"             value="${db-name}"/>
	<filter token="db-user"             value="${db-user}"/>
	<filter token="db-pass"             value="${db-pass}"/>
	<filter token="db-maxconnections"   value="${db-maxconnections}"/>

	<filter token="plugin-db-host"      value="${plugin-db-host}"/>
	<filter token="plugin-db-port"      value="${plugin-db-port}"/>
	<filter token="plugin-db-name"      value="${plugin-db-name}"/>
	<filter token="plugin-db-user"      value="${plugin-db-user}"/>
	<filter token="plugin-db-pass"      value="${plugin-db-pass}"/>

    <filter token="smb-domain-server"   value="${smb-domain-server}" />
    <filter token="smb-domain-name"     value="${smb-domain-name}" />

    <filter token="ldap-url"                        value="${ldap-url}" />
    <filter token="ldap-user"                       value="${ldap-user}" />
    <filter token="ldap-pass"                       value="${ldap-pass}" />
    <filter token="ldap-user-objectclass"           value="${ldap-user-objectclass}" />
    <filter token="ldap-user-identifying-attribute" value="${ldap-user-identifying-attribute}" />
    <filter token="ldap-attributes-mapped-to-roles" value="${ldap-attributes-mapped-to-roles}"/>

	<filter token="smtp-server"         value="${smtp-server}"/>

	<filter token="servermaster-name"   value="${servermaster-name}"/>
	<filter token="servermaster-email"  value="${servermaster-email}"/>

	<filter token="webmaster-name"      value="${webmaster-name}"/>
	<filter token="webmaster-email"     value="${webmaster-email}"/>

    </target>


    <!-- Checks that build.properties is up-to-date. -->
    <target name="check-build-properties" description="Checks that ${build.properties} is up-to-date." unless="build-properties-up-to-date">

        <uptodate targetfile="${build.properties}" property="build-properties-up-to-date">
            <srcfiles dir="${basedir}" includes="${build.properties}.template"/>
        </uptodate>

        <fail unless="build-properties-up-to-date">'${build.properties}.template' is newer than '${build.properties}'. (See INSTALL.TXT for details.)
            Copy '${build.properties}.template' to '${build.properties}' and edit it!
        </fail>

    </target>


    <!-- Checks that 'deployroot' is set. -->
    <target name="check-deployroot" description="Checks that deployroot is set." unless="deployroot">

    	<fail message="Set 'deployroot' in '${build.properties}'!"/>

    </target>


    <!-- Checks that 'webappname' is set. -->
    <target name="check-webappname" description="Checks that webappname is set." unless="webappname">

	<fail message="Set 'webappname' in '${build.properties}'!"/>

    </target>


    <!-- Build the war-file -->
    <target name="dist"
            depends="init,build,check-webappname,wardist,jardist"
            description="Packages a complete distribution.">

    	<echo>Done packaging distribution '${wardist}'.</echo>
	    <echo>Using ${ant.version} with JVM ${ant.java.version}.</echo>

    </target>

    <target name="wardist" depends="init,build,check-webappname" description="Creates a war-file.">

        <war warfile="${wardist}" basedir="${build}" webxml="${WEB-INF}/web.xml"/>

    </target>

    <target name="jardist" depends="init,build,check-webappname" description="Creates jar-files.">
        <jar destfile="${jardist}"    basedir="${classes}"/>
        <jar destfile="${jarapidist}" basedir="${classes}" includes="com/imcode/imcms/api/**"/>
    </target>

    <target name="srcdist" depends="srczipdist,srctgzdist" description="Packages all source distributions."/>

    <target name="srczipdist" depends="init,check-webappname">
        <mkdir dir="${dist}"/>
        <delete file="${srczipdist}"/> <!-- <zip> will for some reason throw an IllegalArgumentException if the file exists.-->
        <zip destfile="${srczipdist}">
            <zipfileset includesfile="${srcincludes}" dir="${basedir}" prefix="${webappname}"/>
        </zip>
    </target>

    <target name="srctgzdist" depends="init,check-webappname">
        <mkdir dir="${dist}"/>
        <dependset>
            <srcfileset file="${srcincludes}"/>
            <targetfileset file="${srctgzdist}" />
        </dependset>
        <tar destfile="${srctgzdist}" compression="gzip">
            <tarfileset includesfile="${srcincludes}" dir="${basedir}" prefix="${webappname}"/>
        </tar>
    </target>

    <target name="srctbz2dist" depends="init,check-webappname">
        <mkdir dir="${dist}"/>
        <dependset>
            <srcfileset file="${srcincludes}"/>
            <targetfileset file="${srctbz2dist}" />
        </dependset>
        <tar destfile="${srctbz2dist}" compression="bzip2">
            <tarfileset includesfile="${srcincludes}" dir="${basedir}" prefix="${webappname}"/>
        </tar>
    </target>

    <!-- If you want to add more things to build by default, the dependencies of this target is the place to do it. -->
    <target name="build"
	    depends="init,
		     classes,
             doc,
		     templates,
		     libraries,
		     web,conf,dir,sql,
		     conference,chat,billboard,postcard,
		     fortune,shop,html-editor"
	    description="Builds everything.">

    	<copy todir="${WEB-INF}" file="install/web.xml"/>

        <!-- Write version.txt -->
        <echo message="${version}" file="${WEB-INF}/version.txt"/>

    </target>


    <!-- Install the webapp, bypassing the war-file -->
    <target name="install" depends="init,build,check-deployroot" description="Copies the webapp directly into the webapp-directory in the deployroot.">
	    <copy todir="${webapproot}">
	        <fileset dir="${build}"/>
	    </copy>
        <copy todir="${webapproot}/WEB-INF/lib">
            <fileset dir="lib/nodist"/>
        </copy>
    </target>


    <!-- Install the war-file -->
    <target name="install-war" depends="init,dist,check-deployroot,check-webappname" description="Copies the WAR-package into the deployroot.">
        <copy file="${wardist}" todir="${deployroot}" overwrite="yes"/>
    </target>


    <!-- Delete everything built by the 'build'-target. -->
    <target name="clean" description="Deletes everything for a fresh start.">

        <delete dir="${build}"/>
        <delete dir="${dist}"/>
        <ant dir="tools" target="clean"/>

    </target>


    <target name="clean-build" depends="init,clean,build" description="Runs targets clean and build."/>

    <target name="clean-install" depends="init,clean,install" description="Runs targets clean and install."/>

    <!-- Delete an installed webapp -->
    <target name="uninstall" depends="check-deployroot,check-webappname" description="Removes the installed files from the deployroot, including the war-file.">
        <delete dir="${webapproot}"/>
        <delete file="${deployroot}/${warfile}"/>
    </target>


    <!-- Run JUnit-tests -->
    <target name="test" depends="server" description="Runs JUnit-tests.">

	<java classname="junit.swingui.TestRunner" fork="yes">
	    <classpath>
		<pathelement path="${classes}"/>
		<pathelement path="install/lib/log4j.jar"/>
		<pathelement path="install/lib/commons-collections.jar"/>
		<pathelement path="install/lib/junit.jar"/>
	    </classpath>
	</java>
    </target>


    <target name="classes" depends="init,server,servlets" description="Builds all classes."/>


    <!-- Generate documentation -->
    <target name="doc" description="Generates javadoc.">
        <javadoc packagenames="imcode.imcms.api.*" sourcepath="server/src/" destdir="${apisamples}/docs" windowtitle="Imcms API">
            <packageset dir="server/src/" defaultexcludes="yes">
                <include name="com/imcode/imcms/api/**"/>
            </packageset>
        </javadoc>
    </target>


    <!-- Build extra tools needed for building. -->
    <target name="tools" depends="server" description="Builds extra tools needed for building.">
	<ant dir="tools"/>
    </target>


    <!-- Generates the sql-scripts -->
    <target name="sql" depends="init,check-webappname,tools" description="Concatenates the SQL-scripts into one large script.">
	<taskdef name="cat" classname="imcode.anttasks.Cat" classpath="tools/build"/>
	<cat destfile="${dist-sql}" orderby="path" filtering="true">
	    <fileset dir="sql/tables" includes="tables.ascii.sql"/>
	    <fileset dir="sql/sprocs"/>
	    <fileset dir="sql/data" includes="types.sql"/>
	    <fileset dir="sql/data" includes="newdb.sql"/>
	    <fileset dir="sql/index"/>
	</cat>
	<cat destfile="${sprocs-sql}" orderby="path" filtering="true">
	    <fileset dir="sql/sprocs"/>
	</cat>
    </target>


    <!-- Builds the 'non-servlets'. -->
    <target name="server" depends="init,dir">

	<mkdir dir="${classes}"/>

	<javac srcdir="server/src" destdir="${classes}" debug="${debug}" optimize="${optimize}" deprecation="${deprecation}">

	    <exclude name="**/Test*.java" unless="junit-available"/>
        <exclude name="**/*TestCase.java" unless="junit-available"/>

        <classpath refid="libraries"/>

	</javac>

    </target>


    <!-- Builds the servlets. -->
    <target name="servlets" depends="init,server" description="Builds the servlets.">

	<mkdir dir="${classes}"/>
	<javac srcdir="servlets" destdir="${classes}" includes="*.java" classpath="${classes}" debug="${debug}" optimize="${optimize}" deprecation="${deprecation}">

        <classpath refid="classes-and-libraries"/>

	</javac>

    </target>


    <!-- Copies the libraries (jar-files) needed for building. -->
    <target name="libraries" depends="init,dir" description="Copies the jar-files.">

	<copy todir="${lib}">
	    <fileset dir="lib" includes="*.jar"/>
	</copy>

    </target>


    <!-- Copies and filters the config-files with the correct properties. -->
    <target name="conf" depends="init" description="Builds the config-directory.">
	    <dependset>
            <srcfileset file="${build.properties}"/>
            <targetfileset dir="${conf}"/>
	    </dependset>
        <copy todir="${conf}" filtering="true">
	        <fileset dir="install/conf" />
    	</copy>

	    <copy file="${conf}/${log4j-config}" tofile="${conf}/log4j.xml"/>

    </target>


    <!-- Creates the directories and copies the files that are to be public. -->
    <target name="web"
            depends="init"
            description="Creates the public web">

	<mkdir dir="${images}"/>
	<mkdir dir="${login}"/>
	<mkdir dir="${css}"/>
	<mkdir dir="${user}"/>
	<mkdir dir="${javascript}"/>
    <mkdir dir="${jsp}"/>
	<mkdir dir="${imcmsimages}"/>

	<copy file="templates/login/index.html" todir="${login}" filtering="true"/>

	<copy todir="${images}">
	    <fileset dir="install/htdocs/images" />
	</copy>

    <copy todir="${css}">
        <fileset dir="install/htdocs/css"/>
    </copy>

    <copy todir="${imcmshtml}" filtering="true">
        <fileset dir="install/htdocs/imcms/html"/>
    </copy>

    <copy todir="${imcmsimages}">
	    <fileset dir="install/htdocs/imcms/images"/>
    </copy>

    <copy todir="${imcmscss}" filtering="true">
	    <fileset dir="install/htdocs/imcms/css"/>
    </copy>

    <copy todir="${imcmsscripts}" filtering="true">
	    <fileset dir="install/htdocs/imcms/scripts"/>
    </copy>

	<copy todir="${webroot}" filtering="true">
	    <fileset dir="templates">
		<patternset>
		    <include name="*.htm"/>
		    <include name="*.html"/>
		    <include name="*.jsp"/>
		</patternset>
	    </fileset>

	    <!-- Copy swedish text-files -->
	    <fileset dir="install/htdocs/sv">
		<include name="adminuser/**"/>
		<include name="shop/**"/>
		<include name="poll/**"/>
        <include name="apisamples/**"/>
		<exclude name="**/*.gif"/>
		<exclude name="**/*.jpg"/>
	    </fileset>
	</copy>

    <!-- Copy images for poll -->
	<copy todir="${poll}/images" >
		<fileset dir="install/htdocs/sv/poll/images">
		<patternset>
		    <include name="*.gif"/>
			<include name="*.jpg"/>
		</patternset>
		</fileset>
	</copy>

	<copy todir="${adminbuttons}/sv">
	    <fileset dir="install/htdocs/sv/adminbuttons">
		<patternset>
		    <include name="*.gif"/>
		</patternset>
	    </fileset>
	</copy>

	<copy todir="${imcmsimages}/se/admin">
	    <fileset dir="install/htdocs/sv/imagebrowse"/>
        <fileset dir="install/htdocs/sv/fileadmin"/>
	</copy>

    <copy todir="${imcmsjsp}" filtering="true">
        <fileset dir="install/htdocs/sv/jsp">
        <patternset>
            <include name="*.jsp"/>
        </patternset>
        </fileset>
    </copy>

    </target>

      <!-- Copies and filters all non-plugin templates. -->
    <target name="templates"
            depends="init,dir,texttemplates,admintemplates"
            description="Copies and filters the templates."/>

    <!-- Copies and filters the texttemplates. -->
    <target name="texttemplates" depends="init" description="Copies and filters the texttemplates">

	<mkdir dir="${demotemplates}"/>

	<copy todir="${texttemplates}" filtering="true">
	    <fileset dir="templates/text"/>
	</copy>

    </target>


    <!-- Copies and filters the admintemplates. -->
    <target name="admintemplates" depends="init" description="Copies and filters the admintemplates.">

	<mkdir dir="${admintemplates}"/>
	<mkdir dir="${searchtemplates}"/>

	<copy todir="${admintemplates}/adminbuttons" filtering="true">
            <fileset dir="templates/sv/adminbuttons"/>
	</copy>

        <replace dir="${admintemplates}/adminbuttons" excludes="adminbuttons.html"
            token="&#10;" value=""/>

        <replace dir="${admintemplates}/adminbuttons" excludes="adminbuttons.html"
            token="&#13;" value=""/>

    <copy todir="${admintemplates}/docinfo" filtering="true">
        <fileset dir="templates/sv/docinfo"/>
    </copy>

	<copy todir="${admintemplates}/permissions" filtering="true">
            <fileset dir="templates/sv/permissions"/>
	</copy>

	<copy todir="${admintemplates}/sections" filtering="true">
            <fileset dir="templates/sv/sections"/>
	</copy>

	<copy todir="${admintemplates}/textdoc" filtering="true">
            <fileset dir="templates/sv/textdoc"/>
	</copy>

	<copy todir="${searchtemplates}" filtering="true">
            <fileset dir="templates/sv/search"/>
	</copy>

	<copy todir="${admintemplates}/shop" filtering="true">
            <fileset dir="templates/sv/shop"/>
	</copy>

	<copy todir="${admintemplates}" filtering="true">
            <fileset dir="templates/sv">
		<patternset>
		    <include name="*.htm"/>
		    <include name="*.html"/>
		    <include name="*.ini"/>
		    <include name="*.txt"/>
		</patternset>
	    </fileset>
	</copy>

    </target>


    <!-- Create some empty directories that will be used by imCMS. -->
    <target name="dir"
	    depends="init"
	    description="Creates some empty directories necessary for imCMS.">

	    <mkdir dir="${includes}"/>
	    <mkdir dir="${uploads}"/>
	    <mkdir dir="${logs}"/>
    </target>


    <!-- Builds the 'conference'-plugin. -->
    <target name="conference"
	    depends="init"
	    description="Builds the conference."
	    if="build-conference">

        <mkdir dir="${classes}"/>
        <javac srcdir="servlets/conf"
            destdir="${classes}"
            includes="*.java"
            classpath="${classes}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}">

            <classpath refid="classes-and-libraries"/>
        </javac>

        <copy todir="${conference-templates}" filtering="true">
            <fileset dir="templates/sv/conf" excludes="original/images/"/>
        </copy>

        <copy todir="${imcmsimages}/se/102/original">
            <fileset dir="templates/sv/conf/original/images" includes="*"/>
        </copy>

    </target>


    <!-- Builds the 'chat'-plugin. -->
    <target name="chat"
	    depends="init"
	    description="Builds the chat."
	    if="build-chat">

        <mkdir dir="${classes}"/>
        <javac srcdir="servlets/chat"
            destdir="${classes}"
            includes="*.java"
            classpath="${classes}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}">

            <classpath refid="classes-and-libraries"/>
        </javac>

        <copy todir="${chat-templates}/original" filtering="true">
            <fileset dir="templates/sv/chat/original"/>
        </copy>
        <copy todir="${chat-templates}" filtering="true">
            <fileset dir="templates/sv/chat" excludes="original/"/>
        </copy>

    </target>


    <!-- Builds the 'billboard'-plugin. -->
    <target name="billboard"
	    depends="init"
	    description="Builds the billboard."
	    if="build-billboard">

        <mkdir dir="${classes}"/>
        <javac srcdir="servlets/billBoard"
            destdir="${classes}"
            includes="*.java"
            classpath="${classes}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}">

            <classpath refid="classes-and-libraries"/>
        </javac>

        <copy todir="${billboard-templates}/original" filtering="true">
            <fileset dir="templates/sv/billboard/original" excludes="images/"/>
        </copy>
        <copy todir="${billboard-templates}" filtering="true">
            <fileset dir="templates/sv/billboard" excludes="original/"/>
        </copy>

        <copy todir="${imcmsimages}/se/104/original">
            <fileset dir="templates/sv/billboard/original/images" includes="*"/>
        </copy>

    </target>


    <target name="postcard"
	    depends="init"
	    description="Builds the postcard."
	    if="build-postcard">

        <copy todir="${postcard-templates}" filtering="true">
            <fileset dir="templates/sv/postcard"/>
        </copy>

    </target>


    <!-- Copies the files for the 'fortune'-plugin. -->
    <target name="fortune"
	    depends="init"
	    description="Copies the files for the 'fortune'-plugin."
	    if="build-fortune">

        <mkdir dir="${fortunes}"/>

        <!-- Create empty files needed by fortune -->
        <touch file="${fortunes}/poll.poll.txt" millis="0"/>
        <touch file="${fortunes}/quotes.txt" millis="0"/>

        <copy todir="${fortune-templates}" filtering="true">
            <fileset dir="templates/sv/fortunes"/>
        </copy>

    </target>


    <!-- Copies the shop files. -->
    <target name="shop" depends="init" description="Copies the shop files." if="build-shop">

        <copy todir="${shop}" filtering="true">
            <fileset dir="install/htdocs/sv/shop" includes="*"/>
        </copy>

    </target>


    <!-- Copies and filters the html-editor files. -->
    <target name="html-editor"
	    depends="init"
	    description="Copies the html-editor files."
	    if="build-htmleditor">

        <mkdir dir="${htmleditor}"/>

        <copy todir="${htmleditor}" filtering="true">
            <fileset dir="install/htdocs/sv/htmleditor/editor" excludes="images/*.jpg,images/*.gif"/>
        </copy>
        <copy todir="${htmleditor}/images">
            <fileset dir="install/htdocs/sv/htmleditor/editor/images" includes="*.jpg,*.gif"/>
        </copy>
        <copy todir="${admintemplates}" filtering="true"
            file="install/htdocs/sv/htmleditor/change_text.html"
            overwrite="yes"/>
    </target>


  </project>
